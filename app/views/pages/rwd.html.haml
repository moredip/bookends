%article
  %h2 Responsive Design
  %p
    At #{client_name} our aim was to create a cross-channel experience.
    This made Responsive Web Design(rwd) a great option.

  %h3 Cross-channel vs multi-channel
  %p What's the difference?

  %h4 Cross-channel
  %p
    Users should be able to accomplish a given task in a like manner across all channels.
    For instance, a bank customer who changes their address from their desktop
    should expect the same/similar user-flow on when visiting the site on their mobile device.

  %h4 Multi-channel
  %p
    Users utilitze a variety products, depending on the channel through which they engage
    with your service.  A bank app may only need a limited set of features on their mobile channel.

  %h4 Why choose one over the other?
  %p
    It depends.
    Introducing
    %strong Experience Design.
    %br
    %strong Not
    interface design,
    %strong not
    visual design.
    %br
    %strong Experience Design.
    Dare we say Product Design? Service Design?
  %p
    What is the overall flow of a user's interaction with your service/brand?
    How do you want to achieve it?
    Should everything be the same? Do you want to update your profile on every device?
    Do you want to be able to simultaneously engage with multple widgets on a single page on all devices? Sure about that?
  %p
    Oh yeah, budget and time can also have some small influence.

  %hr

  %h3 Technical execution of responsive UI
  %p
    Talking about responsive design is one thing; executing is another.
    This is how #{company_name} executed the Responsive Web Design  #{client_name}.

  %h4 Stylesheet File Structure (Applied in order)
  %ul.file-tree
    %li Base
    %li Color Palette
    %li Typography
    %li Elements
    %li UI Elements
    %li View Specific Stylesheets
    %li Media Queries

  %h4 Separation of Visual and Positional Style
  %p
    We tried to apply
    %a{href:"http://thesassway.com/intermediate/a-standard-module-definition-for-sass"}
      a standard module for sass
    by separating out our visual and positional styles.
    The goal was to simplify the view-specific stylesheets and make media query scoping easier and maintainable.

  %h5 Visual Styles
  %p
    Visual styles are defined in the base, elements, and UI elements files.
    Their scope is controlled with the use of mixins, variables and extendable classes.

  %h5 Positional Styles
  %p
    Positional styles are defined in view-specific stylesheets.
    Properties like height, line-height, width, gutters(padding/margin)
    are all driven by variables to keep control of the UI and allow for easy continuous design.
    If a layout-pattern needs to be reused, then that layout-pattern should be extracted into a reusable module.

  %h5 Benefits
  %ul
    %li Visual style can be changed on a global scale from control points.
    %li View-speicifc stylesheets contain simplified-markup as they primarily define only layout.
    %li The layout is driven by variables, creating self-documenting code, increasing readabiliy and decreasing css-positional-gotchas.
    %li Enhanced readability and decreased complexity in view-specific stylesheets enables maintainable media-query scoping in enterprise applications.

  %h5 Challenges
  %p
    Descipline to create seemly-trivial variables out of some heights/widths.
    Many times these variables had no immediate purpose.
    As the product grew, the benefits became more and more clear.
    An open-source example of positional simplicity from seemly-trivial variables:
    %a{href: "https://github.com/moredip/symbiote/blob/master/bundle/stylesheets/sass/_layout.scss"} Symbiote.

  %h4 Scoping Media Queries
  %p
    Media queries are scoped at the bottom of view-specific stylesheet.
    This allows the stylesheet author to keep their modifications and changes specific to that view.
    The media-query mixin is then included in the rwd file as a 1-line include.
    The result was a growing, but flexible/maintainable rwd file of 1-line includes.

  %h4 Javascript resize listeners (booo)
  %p
    Callbacks are expensive. How do you limit the call-backs?
    A crafty/effective solution was reached.

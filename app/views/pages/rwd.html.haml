%article
  %h2 Responsive Design
  = ipsum(1)

  %h3 Cross-channel vs multi-channel
  = ipsum(1)

  %h3 Technical execution of responsive UI

  %h4 Stylesheet File Structure (Applied in order)
  %ul.file-tree
    %li Base
    %li Color Palette
    %li Typography
    %li Elements
    %li UI Elements
    %li View Specific Stylesheets
    %li Media Queries

  %h4 Separation of Visual and Positional Style

  %h5 Visual Styles
  %p
    Visual styles are defined in the base, elements, and UI elements files.
    Their scope is controlled with the use of mixins, variables and extendable classes.

  %h5 Positional Styles
  %p
    Positional styles are defined in view-specific stylesheets.
    Properties like height, line-height, width, gutters(padding/margin)
    are all driven by variables to keep control of the UI and allow for easy continuous design.
    One example of positional simplicity from variables:
    %a{href: "https://github.com/moredip/symbiote/blob/master/bundle/stylesheets/sass/_layout.scss"} Symbiote's Layout.

  %h5 Benefits
  %ul
    %li Visual style can be changed on a global scale from control points.
    %li View-speicifc stylesheets contain simplified-markup as they primarily define only layout.
    %li The layout is driven by variables, creating self-documenting code, increasing readabiliy and decreasing css-positional-gotchas.
    %li If a layout-pattern needs to be reused, then that layout-pattern should be extracted into a reusable module.
    %li Enhanced readability and decreased complexity in view-specific stylesheets enables maintainable media-query scoping in enterprise applications.

  %h4 Scoping Media Queries
  %p
    Media queries are scoped at the bottom of view-specific stylesheet.
    This allows the stylesheet author to keep their modifications and changes specific to that view.
  %h5 Example: Two-column Layout &rarr; Two-column-killer
